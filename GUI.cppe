#include <fstream>
#include <string>
#include <functional>
#include <iostream>
#include <random>
#include "GUI.h"
#include "TextureManager.h"
#include "libs/lodepng/lodepng.h"
#include "libs/libheatmap/heatmap.h"

/*
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#define NANOSVG_IMPLEMENTATION
#include "libs/nanosvg/nanosvg.h"
*/

using std::ifstream;
using std::bind;

using std::cout;
using std::endl;

void LoadDataset()
{
    cout << "Loaded the dataset." << endl;
}

void ToggleDataStructure()
{
    cout << "Toggled" << endl;
}

void ApplySettings()
{
    cout << "Applied Settings" << endl;
}

void DayElapsed()
{
    static const size_t w = 990, h = 627;

    heatmap_t* hm = heatmap_new(w, h);

    std::random_device rd;
    std::mt19937 prng(rd());
    std::normal_distribution<float> randWeight(8000, 1000);

    ifstream positions("resources/textures/counties/positions.txt");
    string texturePath;
    string x;
    string y;
    if(positions.is_open())
    {
        while(getline(positions, texturePath))
        {
            getline(positions, x);
            getline(positions, y);
            // now this is where we would search for the county by day and then FIPS
            // code in the data structure. Once we find the right element, the cases/deaths
            // would go in place of randWeight(prng).
            heatmap_add_weighted_point(hm, stoi(x), stoi(y), randWeight(prng));
        }
        positions.close();
    }

    std::vector<unsigned char> image(w*h*4);

    heatmap_render_saturated_to(hm, heatmap_cs_default, MAX_SATURATION_CASES, &image[0]);
    //heatmap_render_default_to(hm, &image[0]);
    heatmap_free(hm);

    lodepng::encode("resources/textures/heatmap.png", image, w, h);
}

// Constructor for the GUI. This means setting textures, positions, etc. of the sprites
// and UI elements.
GUI::GUI()
{
    /* SETUP SFML SPRITES */

    /*
    NSVGimage* image = NULL;
    image = nsvgParseFromFile("resources/textures/map.svg", "px", 96);
    ofstream pos;
    pos.open("resources/textures/counties/positions.txt");
    for (NSVGshape *shape = image->shapes; shape != NULL; shape = shape->next) {
        float w = (shape->bounds[2]) - (shape->bounds[0]);
        float h = (shape->bounds[3]) - (shape->bounds[1]);
        string name = "resources/textures/counties/";
        name.append(shape->id);
        name.append(".png");

        pos << name << "\n"; // first line: ID
        pos << (shape->bounds[0]) << "\n"; // second line: X pos
        pos << (shape->bounds[1]) << "\n"; // third line: Y pos
    }
    pos.close();
    nsvgDelete(image);
    */

    ifstream positions("resources/textures/counties/positions.txt");
    string texturePath;
    string x;
    string y;
    if(positions.is_open())
    {
        while(getline(positions, texturePath))
        {
            getline(positions, x);
            getline(positions, y);

            sf::Sprite countySprite;
            countySprite.setTexture(TextureManager::GetTexture("resources/" + texturePath));
            countySprite.setPosition(stof(x)+MAP_X, stof(y)+MAP_Y);
            counties.push_back(countySprite);
        }
        positions.close();
    }

    borders.setTexture(TextureManager::GetTexture("resources/textures/borders.png"));
    borders.setPosition(50.3291f+MAP_X, 23.3305f+MAP_Y);
    metrophobic.loadFromFile("resources/fonts/Metrophobic.ttf");

    title.setFont(metrophobic);
    title.setString("COVID-19 Transmission Map");
    title.setCharacterSize(48);
    title.setFillColor(sf::Color(140, 91, 91));
    title.setStyle(sf::Text::Bold);
    title.setPosition(30, 10);

    monthDay.setFont(metrophobic);
    monthDay.setString("June 5");
    monthDay.setCharacterSize(72);
    monthDay.setFillColor(sf::Color(140, 91, 91));
    monthDay.setStyle(sf::Text::Bold);
    monthDay.setPosition(600 - monthDay.getLocalBounds().width/2, 
                         760);

    year.setFont(metrophobic);
    year.setString("2019");
    year.setCharacterSize(24);
    year.setFillColor(sf::Color(140, 91, 91));
    year.setPosition(600 - year.getLocalBounds().width/2, 
                         830);
    
    info.setFont(metrophobic);
    info.setString("Version 1.0\nLast Dataset Entry: ???\nCodeBois. All Rights Reserved.");
    info.setCharacterSize(14);
    info.setFillColor(sf::Color(138, 123, 123));
    info.setPosition(1000, 10);

    DayElapsed();// Generate default heatmap here?

    heatmap.setTexture(TextureManager::GetTexture("resources/textures/heatmap.png"));
    heatmap.setPosition(MAP_X, MAP_Y);


    /* SETUP SFGUI UI ELEMENTS */

    dsToggleButton = sfg::Button::Create("Use B+ Tree");
    dsToggleButton->GetSignal(sfg::Button::OnLeftClick).Connect(
        bind(&ToggleDataStructure)
    );
    dsToggleButton->SetPosition(sf::Vector2f(50, 774));
    dsToggleButton->SetRequisition(sf::Vector2f(259, 76));

    loadDatasetButton = sfg::Button::Create("Load Dataset");
    loadDatasetButton->GetSignal(sfg::Button::OnLeftClick).Connect(
        bind(&LoadDataset)
    );
    loadDatasetButton->SetPosition(sf::Vector2f(891, 774));
    loadDatasetButton->SetRequisition(sf::Vector2f(259, 76));

    seLabel = sfg::Label::Create("Start Date");
    eeLabel = sfg::Label::Create("  End Date");

    startEntry = sfg::Entry::Create("12/01/2019");
    startEntry->SetRequisition(sf::Vector2f(85, 0));
    endEntry = sfg::Entry::Create("12/01/2020");
    endEntry->SetRequisition(sf::Vector2f(85, 0));

    se = sfg::Box::Create( sfg::Box::Orientation::HORIZONTAL, 5.0f);
    se->Pack(seLabel);
    se->Pack(startEntry);

    ee = sfg::Box::Create( sfg::Box::Orientation::HORIZONTAL, 5.0f);
    ee->Pack(eeLabel);
    ee->Pack(endEntry);

    datesBox = sfg::Box::Create(sfg::Box::Orientation::VERTICAL, 5.0f);
    datesBox->SetPosition(sf::Vector2f(50, 700));
    datesBox->Pack(se);
    datesBox->Pack(ee);

    applyButton = sfg::Button::Create("Apply");
    applyButton->GetSignal(sfg::Button::OnLeftClick).Connect(
        bind(&ApplySettings)
    );
    applyButton->SetPosition(sf::Vector2f(215, 700));
    applyButton->SetRequisition(sf::Vector2f(95, 58));

    ss = sfg::Label::Create("State Statistics");
    div = sfg::Separator::Create();
    cs = sfg::Label::Create("County Statistics");

	box = sfg::Box::Create( sfg::Box::Orientation::VERTICAL, 5.0f );
	box->Pack( ss );
	box->Pack( div );
    box->Pack( cs );
    box->Pack( div );

	statsWindow = sfg::Window::Create();
	statsWindow->SetTitle("Statistics");
	statsWindow->Add(box);
    statsWindow->Show(false);

    desktop.Add(dsToggleButton);
    desktop.Add(loadDatasetButton);
    desktop.Add(statsWindow);
    desktop.Add(datesBox);
    desktop.Add(applyButton);
}

void GUI::Redraw(sf::RenderWindow &rw, sf::Vector2f pos)
{
    // 1: Clear
    desktop.Update(clock.restart().asSeconds());
	rw.clear(sf::Color(32, 32, 53));


    // 2: Draw
    rw.draw(borders);

    bool flag = false;
    for(int i = 0; i < counties.size(); i++)
    {
        if (counties[i].getGlobalBounds().contains(pos) && !flag)
        {
            counties[i].setColor(sf::Color::Red);
            flag = true;
        }
        else
        {
            counties[i].setColor(sf::Color::White);
        }
        
        rw.draw(counties[i]);
    }

    rw.draw(heatmap);
    rw.draw(title);
    rw.draw(monthDay);
    rw.draw(year);
    rw.draw(info);
    
    if(flag)
    {
        statsWindow->SetPosition(pos);
        statsWindow->Show(true);
    }
    else
    {
        statsWindow->Show(false);
    }


    // 3: Display
	sfgui.Display(rw);
	rw.display();
}

void GUI::HandleEvent(sf::Event &event)
{
    desktop.HandleEvent(event);
}

void GUI::Cleanup()
{
    TextureManager::ClearTextures();
}